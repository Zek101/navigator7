#summary Documentation.


To use Navigator7, you typically create:
  * a subclass of NavigableApplication
  * a subclass of HeaderFooterFixedAppLevelWindow
  * several page components (typically VerticalLayout or CssLayout descendant)

= NavigableApplication =

In, the class below, you specify:
  * a list of page classes (your pages)
  * the name of your AppLevelWindow (in the overriden createNewNavigableAppLevelWindow() method)

{{{
/**
 * In your NavigableApplication class, you define the list of pages,
 * and your descendent of NavigableAppLevelWindow that the application must instantiate.
 * 
 * @author John Rizzo - BlackBeltFactory.com
 */
public class MyNavigableApplication extends NavigableApplication {

//    @Override
//    public void init() { ....
//      We don't override the init() method because we don't create the Window instance ourselves (the Navigator does that; and what is a Window by the way, don't wanna know about that notion: we have pages).
    
    public MyNavigableApplication() {
        // We need to do that in the constructor (and not later), to ensure that the init method in the ancestor has the PageTemplate and the pages.
        registerPages(new Class[] {Dashboard.class, Editor.class, Ticket.class, ParamTestPage.class});
        setTheme("navigator7");
    }

    @Override
    public NavigableAppLevelWindow createNewNavigableAppLevelWindow() {
        return new MyAppLevelWindow();
    }
    
}
}}}


= MyNavigableApplication =

To work with Navigator7, you must provide a Window extending NavigableAppLevelWindow.
Usually, you don't extend it directly. In the example below, we extend HeaderFooterFixedAppLevelWindow, which provides a template for header/footers and a fixed size layout. It's quite easy to develop other templates, while this template should be the most popular.

Short simplistic version:
{{{{
public class MyAppLevelWindow extends HeaderFooterFixedAppLevelWindow {

    @Override
    protected Component createHeader() {
        retun new Label("Hello, I'm a HEADER.");
    }

    @Override
    protected Component createFooter() {
        return new Label("Hello, I'm a footer!");
    }
}
}}}}

The API enables extending the template very easily. This is a more complex example:

{{{
public class MyAppLevelWindow extends HeaderFooterFixedAppLevelWindow {

    @Override
    protected Component createHeader() {
        VerticalLayout header = new VerticalLayout();
        header.addStyleName("header");  // Application specific style.
        header.setWidth("100%");
        header.setHeight("100px");
        
        ////// Hello
        Label l = new Label("Hello, I'm a HEADER with a menu.");
        l.setWidth(null);
        header.addComponent(l);
        header.setComponentAlignment(l, Alignment.TOP_RIGHT);

        ///// NavigationListener label
        final Label navLabel = new Label();
        navLabel.setWidth(null);
        header.addComponent(navLabel);
        header.setComponentAlignment(navLabel, Alignment.TOP_RIGHT);
        getNavigator().addNavigationListener( new NavigationListener() {
            @Override  public void pageChanged(NavigationEvent event) {
                navLabel.setValue("NavigationListener: pageClass = "+ event.getPageClass() +
                                                  " -- params = " + event.getParams());
            }
        });

        ///// Menu
        MenuBar menuBar = new MenuBar();
        menuBar.setWidth("100%");
        header.addComponent(menuBar);
        header.setComponentAlignment(menuBar, Alignment.BOTTOM_LEFT);
        
        // Create one menu item with each page of the application
        // this is little bit artificial in the example. In a business application, you manually select (name) the pages to put in the menu, instead of having a loop.
        // something like: 
        //        menuBar.addItem("Manage Your Tickets", new MenuBar.Command() {
        //            public void menuSelected(MenuItem selectedItem) {
        //                getNavigator().navigateTo(Ticket.class);
        //            }
        //        });
        Collection<Class <? extends Component>> pageClassColl = MyNavigableApplication.getCurrent().getNavigatorConfig().getPagesClass();
        for (final Class<? extends Component> pageClass : pageClassColl) {
            menuBar.addItem(pageClass.getSimpleName(), new MenuBar.Command() {
                public void menuSelected(MenuItem selectedItem) {
                    getNavigator().navigateTo(pageClass);
                }
            });
        }

        return header;
    }

    @Override
    protected Component createFooter() {
        VerticalLayout vLayout = new VerticalLayout();
        vLayout.setWidth("100%");
        
        Label ll = new Label("Hello, I'm a footer!");
        ll.setWidth(null);
        vLayout.addComponent(ll);
        vLayout.setComponentAlignment(ll, Alignment.TOP_CENTER);
        
        
        Label l = new Label("Developped by John Rizzo in 2010 for Vaadin.");
        l.setWidth(null);
        vLayout.addComponent(l);
        vLayout.setComponentAlignment(l, Alignment.BOTTOM_CENTER);
        vLayout.setHeight("200px");
        return vLayout; 
    }

    @Override
    protected ComponentContainer createComponents() {
        ComponentContainer result = super.createComponents();
        this.getFooterBand().addStyleName("footer");   // We apply the footer to the whole outer band, not only to the fixed width inner band.
        return result;
    }

}
}}}

= Pages =

Finally, you define pages. A page can be any Vaadin Component.

Simplistic example:
{{{
@Page
public class SimpleContentPage extends VerticalLayout {

    public MyPage1() {
        addComponent( new Label("I'm on a page") );
        addComponent( new Label("I'm on a page too...") );
        addComponent( new Label("There is no much content here") );
    }

}
}}}

All you have to do is to define the page (SimpleContentPage.class) in you NavigableApplication descendant as shown above.

= Navigation =

The page above is accessible from this url:

{{{http://mydomain.com/#SimpleContent}}}

= UriAnalyzer =

You probably create pages to display something...
And it's 
That's it for the very high level basics.

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages